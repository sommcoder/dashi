import "./Table.css";
import Row from "../Row/Row";
import HeaderRow from "../HeaderRow/HeaderRow";
import SettingsHeader from "../SettingsHeader/SettingsHeader";
import { useQuery, useQueryClient } from "react-query";

import { useState } from "react";

export default function Table() {
  const queryClient = useQueryClient(); // Now, at the component level, we call useQueryClient

  // queries:
  const query = useQuery({
    queryKey: "table-data", // this is the key to reference the fetched data
    queryFn: () => {
      fetch(`${import.meta.env.VITE_URL}/tables`, {
        method: "GET",
        // mode: "cors",
      })
        .then((res) => res.json())
        .then((data) => {
          console.log(data);
        })
        .catch((err) => {
          err.message;
        });
    },
  });

  /*
  1) Data is fetched from server
  2) Data is rendered based on default settings
  3) Data can be adjusted by user
  */

  /*
 
  - How do we allow the resize bar the ability to adjust the size of the columns?
  - we make the width of the columns be a state value that gets updated as we adjust it incrementally.
 
*/

  // number represents the rem units, will need to be concatenated so as to be valid css
  // we will need to have an object

  // the state of the columns visibility:
  // columns can be reordered, boolean determines if values render in table
  // their existence and sequence determines if they're rendered
  // always have = for visual cue that table is grabbable and - x to indicate

  // eventually this will be controlled by the user when they select which columns they want to view:
  // const initColStateSeq = Object.keys(data[0]);

  const columnWidthObj = {};
  // populate the column width based on the data
  // initColStateSeq.forEach((el) => (columnWidthObj[el] = 3));
  // 3 is the default rem width for columns
  // declare the state hook:
  const [columnWidth, setColumnWidth] = useState(columnWidthObj);

  // columns are generated by the number of headers

  // The rows are the "tuples" of each object in the data set

  // const cols = {
  //   gridTemplateColumns: `repeat(${initColStateSeq.length}, 1 fr)`,
  // };

  // how to get icons onto the header whilst keeping the columns aligned

  const [tableDisplay, setTableDisplay] = useState(true);
  // const [currColState, adjustColumnState] = useState(initColStateSeq);
  // the quick thought is that the icons need to be agnostic/independent of the actual table

  // the "rows" for the tables should just be 3 things: the top adjustment header, the headerRow and then the table content itself
  const rows = {
    gridTemplateRows: `3rem auto auto`,
  };

  // we need to get different data depending on the title

  const tableSize = {};

  // based on the sequence will determine which keys we access from our JSON data as we iterate through it

  return (
    <div style={rows} draggable className="dashboard-table">
      <SettingsHeader
        tableDisplay={tableDisplay}
        setTableDisplay={setTableDisplay}
      />
      {/* <HeaderRow tableDisplay={tableDisplay} headers={initColStateSeq} /> */}
      {/* {data.map((el, i) =>
        tableDisplay ? (
          <Row
            columnWidth={columnWidth}
            tableDisplay={tableDisplay}
            key={`row-${i}`}
            el={el}
            headers={initColStateSeq}
          />
        ) : (
          ""
        ) */}
      {/* )} */}
    </div>
  );
}
